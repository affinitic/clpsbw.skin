# -*- coding: utf-8 -*-

import commands
from tempfile import mktemp
from zope.interface import implements
from Products.CMFCore.utils import getToolByName
from clpsbw.skin.browser.ManageClpsbw import ManageClpsbw
from clpsbw.skin.browser.interfaces import IManageClpsbw

PDF_COMMAND = "wkhtmltopdf-amd64 --page-size A4 \
               --footer-spacing 5 --footer-line --footer-font-size 8 \
               --footer-left 'CLPS-Bw : Projets partagés' \
               --footer-center '%s' \
               --footer-right [page]"


class ManagePdf(ManageClpsbw):
    implements(IManageClpsbw)

    def getPdf(self, experiencePk=None, institutionPk=None, ressourcePk=None):
        """
        Returns PDF generated by wkhtmltopdf on a specific url for
         - experience
         - institution
         - ressource
        """
        portalUrl = getToolByName(self.context, 'portal_url')()

        if experiencePk is not None:
            viewName = 'pdf-experience'
            filename = 'Experience.pdf'
            url = '%s/%s?experiencePk=%s' % (portalUrl, viewName, experiencePk)
            command = PDF_COMMAND % 'Expérience'

        elif institutionPk is not None:
            viewName = 'pdf-institution'
            filename = 'Institution.pdf'
            url = '%s/%s?institutionPk=%s' % (portalUrl, viewName, institutionPk)
            command = PDF_COMMAND % 'Institution'

        elif ressourcePk is not None:
            viewName = 'pdf-ressource'
            filename = 'Ressource.pdf'
            url = '%s/%s?ressourcePk=%s' % (portalUrl, viewName, ressourcePk)
            command = PDF_COMMAND % 'Ressource'

        else:
            return

        filepath = mktemp('.pdf')
        commands.getstatusoutput("%s %s %s" % (command, url, filepath))

        self.request.response.setHeader("Content-type", "application/pdf")
        self.request.response.setHeader("Content-Disposition", "attachment; filename=%s" % filename)
        fh = open(filepath)
        filecontents = fh.read()
        return filecontents
